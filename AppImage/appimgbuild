#!/bin/bash

# Find out the version
function get_version() {
  THEDEB=$(find ../*.deb -name $LOWERAPP"_*" | head -n 1)
  if [ -z "$THEDEB" ] ; then
    echo "Version could not be determined from the .deb; you need to determine it manually"
  fi
  VER1=$(echo $THEDEB | cut -d "~" -f 1 | cut -d "_" -f 2 | cut -d "-" -f 1 | sed -e 's|1%3a||g' | sed -e 's|+dfsg||g' )
  GLIBC_NEEDED=$(glibc_needed)
  VERSION=$VER1.glibc$GLIBC_NEEDED
  echo $VERSION
}


function create_work_dir() {
	# Create .AppDir/usr/lib and move to app folder
	mkdir -p ./$APP/$APP.AppDir/usr/lib
	cd ./$APP/

	cd_work_dir

	# Delete Appdir
	if [ -d "./$APP.AppDir/" ] ; then
	  rm -rf ./$APP.AppDir/
	fi 
}

function create_app_dir () {
 	cd_work_dir

	mkdir -p ./$APP.AppDir/
	cd ./$APP.AppDir/

	mkdir -p usr/bin usr/lib
}

function cd_work_dir() {
	cd $DIR/$APP/
}

function cd_app_dir () {
	cd $DIR/$APP/$APP.AppDir/
}

function extract_debs () {
	cd_app_dir
	find ../*.deb -exec dpkg -x {} . \; || true
}

function create_status_and_sources_list () {
	generate_status
	generate_sources_list
}

function generate_status() {
	cd_work_dir

	mkdir -p ./tmp/archives/
	mkdir -p ./tmp/lists/partial
	touch tmp/pkgcache.bin tmp/srcpkgcache.bin
	wget -q -c "https://github.com/AppImage/AppImages/raw/master/excludedeblist"
	rm status 2>/dev/null || true
	for PACKAGE in $(cat excludedeblist | cut -d "#" -f 1) ; do
	printf "Package: $PACKAGE\nStatus: install ok installed\nArchitecture: all\nVersion: 9:999.999.999\n\n" >> status
	done
}

function generate_sources_list () {
	cd_work_dir

	if [ -e sources.list ] ; then
		rm sources.list
	fi
	for SOURCE in "${INGREDIENTS_SOURCES[@]}" ; do
	echo "${SOURCE}" >> sources.list
	done
	#for PPA in "${_ingredients_ppas[@]}" ; do
	#  echo "deb http://ppa.launchpad.net/${PPA}/ubuntu ${_ingredients_dist} main" >> sources.list
	#done
}


function download_flowblade_deb () {
	cd_work_dir

	DLD=$(wget -q "https://github.com/jliljebl/flowblade/releases" -O - | grep _all.deb | head -n 1 | cut -d '"' -f 2)
	echo "$DLD" | cut -d "-" -f 2 > VERSION
	wget -c "https://github.com/$DLD"
}

function download_dependencies_debs () {
	  dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz
	  echo "deb file:$(readlink -e $PWD) ./" >> sources.list

	  INSTALL=$LOWERAPP

	  apt-get $OPTIONS update || true
	

	  URLS=$(apt-get $OPTIONS -y install --print-uris $INSTALL | cut -d "'" -f 2 | grep -e "^http")
	  for URL in $URLS ; do
	    if [ ! -f $(basename "$URL") ] ; then
	      wget -c $URL
	    fi
	  done
}

function delete_blacklisted_and_developer_files() {
	cd_app_dir

	BLACKLISTED_FILES=$(wget -q https://github.com/probonopd/AppImages/raw/master/excludelist -O - | sed '/^\s*$/d' | sed '/^#.*$/d')
	echo $BLACKLISTED_FILES
	for FILE in $BLACKLISTED_FILES ; do
	FOUND=$(find . -xtype f -name "${FILE}" 2>/dev/null)
	if [ ! -z "$FOUND" ] ; then
	echo "Deleting blacklisted ${FOUND}"
	rm -f "${FOUND}"
	fi
	done

	# Do not bundle developer stuff
	rm -rf usr/include || true
	rm -rf usr/lib/cmake || true
	rm -rf usr/lib/pkgconfig || true
	find . -name '*.la' | xargs -i rm {}
}


function copy_icons () {
	cd_app_dir

	mkdir -p usr/share/icons/hicolor/{22x22,24x24,32x32,48x48,64x64,128x128,256x256,512x512}/apps/
	find . -path *icons* -path *22* -name "*$LOWERAPP*" -exec cp {} usr/share/icons/hicolor/22x22/apps/ \; || true
	find . -path *icons* -path *24* -name "*$LOWERAPP*" -exec cp {} usr/share/icons/hicolor/24x24/apps/ \; || true
	find . -path *icons* -path *32* -name "*$LOWERAPP*" -exec cp {} usr/share/icons/hicolor/32x32/apps/ \; || true
	find . -path *icons* -path *48* -name "*$LOWERAPP*" -exec cp {} usr/share/icons/hicolor/48x48/apps/ \; || true
	find . -path *icons* -path *64* -name "*$LOWERAPP*" -exec cp {} usr/share/icons/hicolor/64x64/apps/ \; || true
	find . -path *icons* -path *128* -name "*$LOWERAPP*" -exec cp {} usr/share/icons/hicolor/128x128/apps/ \; || true
	find . -path *icons* -path *256* -name "*$LOWERAPP*" -exec cp {} usr/share/icons/hicolor/256x256/apps/ \; || true
	find . -path *icons* -path *512* -name "*$LOWERAPP*" -exec cp {} usr/share/icons/hicolor/512x512/apps/ \; || true
}

# Find the icon file and copy it to the AppDir
function get_app_icon() {
	cd_app_dir

	find ./usr/share/pixmaps/$LOWERAPP.png -exec cp {} . \; 2>/dev/null || true
	find ./usr/share/icons -path *64* -name $LOWERAPP.png -exec cp {} . \; 2>/dev/null || true
	find ./usr/share/icons -path *128* -name $LOWERAPP.png -exec cp {} . \; 2>/dev/null || true
	find ./usr/share/icons -path *512* -name $LOWERAPP.png -exec cp {} . \; 2>/dev/null || true
	find ./usr/share/icons -path *256* -name $LOWERAPP.png -exec cp {} . \; 2>/dev/null || true
	ls -lh $LOWERAPP.png || true
}

function create_apprun {
cd_app_dir

cat > AppRun <<\EOF
#!/bin/sh
HERE="$(dirname "$(readlink -f "${0}")")"
export UNION_PRELOAD="${HERE}"
export LD_PRELOAD="${HERE}/libunionpreload.so"
export PATH="${HERE}"/usr/bin/:"${HERE}"/usr/sbin/:"${HERE}"/usr/games/:"${HERE}"/bin/:"${HERE}"/sbin/:"${PATH}"
export LD_LIBRARY_PATH="${HERE}"/usr/lib/:"${HERE}"/usr/lib/i386-linux-gnu/:"${HERE}"/usr/lib/x86_64-linux-gnu/:"${HERE}"/usr/lib32/:"${HERE}"/usr/lib64/:"${HERE}"/lib/:"${HERE}"/lib/i386-linux-gnu/:"${HERE}"/lib/x86_64-linux-gnu/:"${HERE}"/lib32/:"${HERE}"/lib64/:"${LD_LIBRARY_PATH}"
export PYTHONPATH="${HERE}"/usr/share/pyshared/:"${PYTHONPATH}"
export XDG_DATA_DIRS="${HERE}"/usr/share/:"${XDG_DATA_DIRS}"
export PERLLIB="${HERE}"/usr/share/perl5/:"${HERE}"/usr/lib/perl5/:"${PERLLIB}"
export GSETTINGS_SCHEMA_DIR="${HERE}"/usr/share/glib-2.0/schemas/:"${GSETTINGS_SCHEMA_DIR}"
export QT_PLUGIN_PATH="${HERE}"/usr/lib/qt4/plugins/:"${HERE}"/usr/lib/i386-linux-gnu/qt4/plugins/:"${HERE}"/usr/lib/x86_64-linux-gnu/qt4/plugins/:"${HERE}"/usr/lib32/qt4/plugins/:"${HERE}"/usr/lib64/qt4/plugins/:"${HERE}"/usr/lib/qt5/plugins/:"${HERE}"/usr/lib/i386-linux-gnu/qt5/plugins/:"${HERE}"/usr/lib/x86_64-linux-gnu/qt5/plugins/:"${HERE}"/usr/lib32/qt5/plugins/:"${HERE}"/usr/lib64/qt5/plugins/:"${QT_PLUGIN_PATH}"
EXEC=$(grep -e '^Exec=.*' "${HERE}"/*.desktop | head -n 1 | cut -d "=" -f 2- | sed -e 's|%.||g')
exec ${EXEC} $@
EOF
chmod a+x AppRun
}

function create_desktop_file()
{
   find usr/share/applications -iname "*${LOWERAPP}.desktop" -exec cp {} . \; || true
}

function fix_qt_gstreamer_pulse_audio {

# Prevent Qt from loading plugins from the system
unset QTPATH
QTPATH=$(find usr/lib -type d -name qt4 -or -name qt5 | sed -e 's|usr/|../|g')
if [ ! -z $QTPATH ] ; then
cat > usr/bin/qt.conf <<EOF
[Paths]
Prefix = $QTPATH
EOF
fi

# Move Gstreamer
if [ -d "./usr/lib/x86_64-linux-gnu/gstreamer-1.0/" ] ; then
  mv ./usr/lib/x86_64-linux-gnu/gstreamer-1.0/* ./usr/lib/x86_64-linux-gnu/
  rm -r ./usr/lib/x86_64-linux-gnu/gstreamer-1.0
fi

# Move pulseaudio
if [ -d "./usr/lib/x86_64-linux-gnu/pulseaudio/" ] ; then
  mv ./usr/lib/x86_64-linux-gnu/pulseaudio/* ./usr/lib/x86_64-linux-gnu/
  rm -r ./usr/lib/x86_64-linux-gnu/pulseaudio
fi
}

function flowblade_post_extract_fixes () {
	cd_app_dir

	# from .yml
	ls
	unset GTK_MODULES
	sed -i -e 's|if launch_dir == "/usr/bin":|if True:|g' usr/bin/flowblade
	awk 'NR==2{print "unset GTK_MODULES"}7' AppRun
	mv usr/lib/lapack/* usr/lib/x86_64-linux-gnu/
	mv ./usr/lib/libblas/* usr/lib/x86_64-linux-gnu/
	rm -rf cd usr/share/glib-2.0/schemas/

	# Some non-distribution provided applications have an absolute
	# path in the Exec= line which we remove for relocateability
	DESKTOP=$(find . -name '*.desktop' | sort | head -n 1)
	if [ -z "$DESKTOP" ] ; then
	  echo "desktop file not found, aborting"
	  exit 1
	else
	  desktop-file-validate "$DESKTOP" || exit 1
	  ORIG=$(grep -o "^Exec=.*$" "${DESKTOP}" | head -n 1| cut -d " " -f 1)
	  REPL=$(basename $(grep -o "^Exec=.*$" "${DESKTOP}" | head -n 1 | cut -d " " -f 1 | sed -e 's|Exec=||g'))
	  sed -i -e 's|'"${ORIG}"'|Exec='"${REPL}"'|g' "${DESKTOP}"
	fi

	# Compile GLib schemas if the subdirectory is present in the AppImage
	# AppRun has to export GSETTINGS_SCHEMA_DIR for this to work
	if [ -d usr/share/glib-2.0/schemas/ ] ; then
	  ( cd usr/share/glib-2.0/schemas/ ; glib-compile-schemas . )
	fi

	if [ -f ../VERSION ] ; then
	  VERSION=$(cat ../VERSION).glibc$(glibc_needed)
	else
	  get_version || true
	fi

	echo "VERSION:"$VERSION

	# Don't suffer from NIH; use LD_PRELOAD to override calls to /usr paths
	mkdir -p usr/src/
	wget -q "https://raw.githubusercontent.com/mikix/deb2snap/master/src/preload.c" -O - | \
	sed -e 's|SNAPPY|UNION|g' | sed -e 's|SNAPP|UNION|g' | sed  -e 's|SNAP|UNION|g' | \
	sed -e 's|snappy|union|g' > usr/src/libunionpreload.c
	gcc -shared -fPIC usr/src/libunionpreload.c -o libunionpreload.so -ldl -DUNION_LIBNAME=\"libunionpreload.so\"
	strip libunionpreload.so
}

function glibc_needed() {
  find . -name *.so -or -name *.so.* -or -type f -executable  -exec readelf -s '{}' 2>/dev/null \; | sed -n 's/.*@GLIBC_//p'| awk '{print $1}' | sort --version-sort | tail -n 1
}

function get_desktopintegration()
{
  REALBIN=$(grep -o "^Exec=.*" *.desktop | sed -e 's|Exec=||g' | cut -d " " -f 1 | head -n 1)
  wget -O ./usr/bin/$REALBIN.wrapper https://raw.githubusercontent.com/probonopd/AppImageKit/master/desktopintegration
  chmod a+x ./usr/bin/$REALBIN.wrapper

  sed -i -e "s|^Exec=$REALBIN|Exec=$REALBIN.wrapper|g" flowblade.desktop
}

function fix_desktop_files_and_Python_imports () {
# Fix desktop files that have file endings for icons
sed -i -e 's|\.png||g' *.desktop || true
sed -i -e 's|\.svg||g' *.desktop || true
sed -i -e 's|\.svgz||g' *.desktop || true
sed -i -e 's|\.xpm||g' *.desktop || true

# Fix Python imports,
# https://github.com/probonopd/AppImages/issues/172
SITECUSTOMIZEFILES=$(find . -type f -name "sitecustomize.py")
for SITECUSTOMIZEFILE in $SITECUSTOMIZEFILES ; do
cat > $SITECUSTOMIZEFILE <<\EOF
import sys,os
prefix = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(sys.path[0]))))
sys.path = [ prefix+s for s in sys.path if not s.startswith(prefix) ]
EOF
done
}


# Generate AppImage type 2
function generate_type2_appimage()
{
	cd_work_dir

	# Get the ID of the last successful build on Travis CI
	# ID=$(wget -q https://api.travis-ci.org/repos/probonopd/appimagetool/builds -O - | head -n 1 | sed -e 's|}|\n|g' | grep '"result":0' | head -n 1 | sed -e 's|,|\n|g' | grep '"id"' | cut -d ":" -f 2)
	# Get the transfer.sh URL from the logfile of the last successful build on Travis CI
	# Only Travis knows why build ID and job ID don't match and why the above doesn't give both...
	# URL=$(wget -q "https://s3.amazonaws.com/archive.travis-ci.org/jobs/$((ID+1))/log.txt" -O - | grep "https://transfer.sh/.*/appimagetool" | tail -n 1 | sed -e 's|\r||g')
	# if [ -z "$URL" ] ; then
	#   URL=$(wget -q "https://s3.amazonaws.com/archive.travis-ci.org/jobs/$((ID+2))/log.txt" -O - | grep "https://transfer.sh/.*/appimagetool" | tail -n 1 | sed -e 's|\r||g')
	# fi
	URL="https://github.com/probonopd/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
	wget -c "$URL" -O appimagetool
	chmod a+x ./appimagetool
	set +x
	if ( [ ! -z "$KEY" ] ) && ( ! -z "$TRAVIS" ) ; then
		wget https://github.com/probonopd/AppImageKit/files/584665/data.zip -O data.tar.gz.gpg
		( set +x ; echo $KEY | gpg2 --batch --passphrase-fd 0 --no-tty --skip-verify --output data.tar.gz --decrypt data.tar.gz.gpg )
		tar xf data.tar.gz
		sudo chown -R $USER .gnu*
		mv $HOME/.gnu* $HOME/.gnu_old ; mv .gnu* $HOME/
		VERSION=$VERSION ./appimagetool -s --bintray-user $BINTRAY_USER --bintray-repo $BINTRAY_REPO -v ./$APP.AppDir/
	else
		VERSION=$VERSION ./appimagetool --bintray-user $BINTRAY_USER --bintray-repo $BINTRAY_REPO -v ./$APP.AppDir/
	fi
	set -x
	mkdir -p ../out/ || true
	mv *.AppImage* ../out/
}

# -------------------------------------------------------------------------------------------------- "main" ish

cd "$(dirname "$0")"

# Halt on errors
set -e
set -x

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
APP="Flowblade"
LOWERAPP="flowblade"

DEBS=(python-cairo python-gi-cairo python-gi python-numpy python-mlt librsvg2-common swh-plugins python python-dbus python-pil gmic gir1.2-glib-2.0 gir1.2-gtk-3.0 gir1.2-pango-1.0 gir1.2-gdkpixbuf-2.0)
INGREDIENTS_SOURCES=("deb [arch=amd64] http://us.archive.ubuntu.com/ubuntu/ xenial main universe")

OPTIONS="-o Debug::NoLocking=1
-o APT::Cache-Limit=125829120
-o Dir::Etc::sourcelist=./sources.list
-o Dir::State=./tmp
-o Dir::Cache=./tmp
-o Dir::State::status=./status
-o Dir::Etc::sourceparts=-
-o APT::Get::List-Cleanup=0
-o APT::Get::AllowUnauthenticated=1
-o Acquire::AllowInsecureRepositories=true
-o Debug::pkgProblemResolver=true
-o Debug::pkgDepCache::AutoInstall=true
-o APT::Install-Recommends=0
-o APT::Install-Suggests=0
"

case "$1" in
	"run-all")
		create_work_dir
		create_status_and_sources_list
		download_flowblade_deb
		download_dependencies_debs
		create_app_dir
		extract_debs
		copy_icons
		get_app_icon
		create_apprun
		create_desktop_file
		fix_qt_gstreamer_pulse_audio
		flowblade_post_extract_fixes
		delete_blacklisted_and_developer_files
		get_desktopintegration
		fix_desktop_files_and_Python_imports
		generate_type2_appimage

		ls -lh ../out/*.AppImage

		echo "Finished"
		;;
	"cd-work-dir")
		cd_work_dir
		;;
	*)
		echo "Unknown command: $1"
		;;
esac
